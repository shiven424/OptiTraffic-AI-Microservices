# gateway/nginx.conf
load_module modules/ngx_http_auth_jwt_module.so;

events {}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    map $http_origin $cors_origin { default $http_origin; }

    limit_req_zone   $binary_remote_addr zone=api_limit:10m rate=20r/s;
    limit_conn_zone  $binary_remote_addr zone=api_conn:10m;

    # ─── Upstreams ───────────────────────────────────────────────────────────
    upstream login_upstream {
        zone login_upstream 64k;
        server login_service:5001     max_fails=3 fail_timeout=30s;
    }
    upstream traffic_signal_upstream {
        zone ts_upstream 64k;
        server traffic_signal:5000    max_fails=3 fail_timeout=30s;
    }
    upstream monitoring_upstream {
        zone mon_upstream 64k;
        server traffic_monitoring:8000 max_fails=3 fail_timeout=30s;
    }
    upstream notification_upstream {
        zone notif_upstream 64k;
        server notification:5003      max_fails=3 fail_timeout=30s;
    }
    upstream simulator_upstream {
        zone sim_upstream 64k;
        server simulator:5002         max_fails=3 fail_timeout=30s;
    }

    server {
        listen 80;

        # CORS & preflight
        add_header  Access-Control-Allow-Origin  "$cors_origin" always;
        add_header  Access-Control-Allow-Methods "GET,POST,PUT,DELETE,OPTIONS" always;
        add_header  Access-Control-Allow-Headers "Authorization,Content-Type" always;
        if ($request_method = OPTIONS) { return 204; }

        limit_req   zone=api_limit burst=10 nodelay;
        limit_conn  api_conn  10;

        # ─── Gateway health ───────────────────────────────────────────────────
        location = /health {
            return 200 'OK';
        }

        # ─── Public (unprotected) login ──────────────────────────────────────
        location /api/login/ {
            proxy_pass       http://login_upstream;
            proxy_set_header Host $host;
        }
        location /oauth/token {
            proxy_pass       http://login_upstream;
            proxy_set_header Host $host;
        }

        # ─── JWT‑protected APIs ───────────────────────────────────────────────
        # All /api/* except /api/login and /oauth/token require a valid JWT
        location /api/ {
            auth_jwt           "Protected API";
            auth_jwt_key_file  /etc/nginx/jwks.json;

            # dispatch by prefix
            if ($request_uri ~ ^/api/traffic) {
                proxy_pass   http://traffic_signal_upstream;
                break;
            }
            if ($request_uri ~ ^/api/mode) {
                proxy_pass   http://traffic_signal_upstream;
                break;
            }
            if ($request_uri ~ ^/api/monitoring) {
                proxy_pass   http://monitoring_upstream;
                break;
            }
            # fallback (e.g. unrecognized /api/*)
            return 404;
        }

        # ─── Notifications (JWT‑protected) ───────────────────────────────────
        location /notifications/ {
            auth_jwt           "Notifications";
            auth_jwt_key_file  /etc/nginx/jwks.json;
            proxy_pass         http://notification_upstream;
        }

        # ─── Simulator static files ──────────────────────────────────────────
        location /sim/ {
            proxy_pass       http://simulator_upstream/;
            proxy_set_header Host $host;
        }

        # ─── WebSocket proxy (CityFlow) ──────────────────────────────────────
        location /ws {
            proxy_pass             http://simulator_upstream/ws;
            proxy_http_version     1.1;
            proxy_set_header       Host       $host;
            proxy_set_header       Upgrade    $http_upgrade;
            proxy_set_header       Connection $connection_upgrade;
            proxy_read_timeout     3600s;
            proxy_send_timeout     3600s;
            proxy_cache_bypass     $http_upgrade;
        }

        # ─── Service‑level health checks ─────────────────────────────────────
        location /health/login {
            proxy_pass http://login_upstream/health;
        }
        location /health/traffic_signal {
            proxy_pass http://traffic_signal_upstream/health;
        }
        location /health/monitoring {
            proxy_pass http://monitoring_upstream/health;
        }
        location /health/notification {
            proxy_pass http://notification_upstream/health;
        }
        location /health/simulator {
            proxy_pass http://simulator_upstream/health;
        }

        # ─── Fallback ─────────────────────────────────────────────────────────
        location / {
            return 404;
        }
    }
}
