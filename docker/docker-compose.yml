version: '3.8'

services:
  # ─────────────────────────────────────────────────────────────
  # Infrastructure
  # ─────────────────────────────────────────────────────────────
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - app-network

  # ──────────────────────────────────────────────────────────────────────────
  # Micro‑services
  # ──────────────────────────────────────────────────────────────────────────
  login_service:
    build:
      context: ../microservices/login_service
      dockerfile: Dockerfile
    container_name: login_service
    expose:
      - "5001"
    environment:
      - JWT_PRIVATE_KEY_PATH=/etc/keys/private.pem
    volumes:
      - ./keys/private.pem:/etc/keys/private.pem:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  traffic_signal:
    build:
      context: ../microservices/traffic_signal
      dockerfile: Dockerfile
    container_name: traffic_signal
    expose:
      - "5000"
    environment:
      - ENCRYPTION_KEY=hSDYYflLm3HeCQvS2L1FfVVjOqfV8bSCltb9Y4IbL2o=
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  traffic_monitoring:
    build:
      context: ../microservices/traffic_monitoring
      dockerfile: Dockerfile
    container_name: traffic_monitoring
    expose:
      - "8000"
    environment:
      - ENCRYPTION_KEY=hSDYYflLm3HeCQvS2L1FfVVjOqfV8bSCltb9Y4IbL2o=
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  notification:
    build:
      context: ../microservices/notification
      dockerfile: Dockerfile
    container_name: notification
    expose:
      - "5003"
    environment:
      - ENCRYPTION_KEY=hSDYYflLm3HeCQvS2L1FfVVjOqfV8bSCltb9Y4IbL2o=
      - GMAIL_USER=optitrafficai@gmail.com
      - GMAIL_PASSWORD=xdxw bhnr wfsd tlrz
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5003/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  simulator:
    build:
      context: ../microservices/simulator
      dockerfile: Dockerfile
    container_name: simulator
    expose:
      - "5002"
    environment:
      - KAFKA_BROKER=kafka:9092
      - ENCRYPTION_KEY=hSDYYflLm3HeCQvS2L1FfVVjOqfV8bSCltb9Y4IbL2o=
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5002/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  cityflow_simulation:
    build:
      context: ../cityflow_simulation
      dockerfile: Dockerfile
    container_name: cityflow_simulation
    platform: linux/arm64/v8
    volumes:
      - ../cityflow_simulation:/app
    depends_on:
      kafka:
        condition: service_healthy
    command: ["python", "simulation.py"]
    environment:
      - CONFIG_PATH=/app/config.json
      - ENCRYPTION_KEY=hSDYYflLm3HeCQvS2L1FfVVjOqfV8bSCltb9Y4IbL2o=
    networks:
      - app-network

  # ──────────────────────────────────────────────────────────────────────────
  # API Gateway
  # ──────────────────────────────────────────────────────────────────────────
  api_gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "8080:80"
    volumes:
      - ./gateway/jwks.json:/etc/nginx/jwks.json:ro
      # - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./gateway/jwt_public.pem:/etc/nginx/jwt_public.pem:ro
    depends_on:
      login_service:
        condition: service_healthy
      traffic_signal:
        condition: service_healthy
      traffic_monitoring:
        condition: service_healthy
      notification:
        condition: service_healthy
      simulator:
        condition: service_healthy
    networks:
      - app-network

  # ──────────────────────────────────────────────────────────────────────────
  # Frontend
  # ──────────────────────────────────────────────────────────────────────────
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_WS_URL=ws://localhost:8080/ws
    depends_on:
      - api_gateway
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
